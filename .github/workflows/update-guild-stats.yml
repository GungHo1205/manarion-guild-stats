name: Update Guild Stats

on:
  schedule:
    # Runs every hour at minute 0 (only on master branch)
    - cron: "0 * * * *"
    # Special run at midnight UTC for baseline (only on master branch)
    - cron: "0 0 * * *"
  workflow_dispatch: # Allows manual triggering
  push:
    branches: [master, dev] # Trigger on both master and dev

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run guild stats script
        run: python guild-stats.py

      - name: Convert CSV to JSON for web display
        run: |
          python -c "
          import csv
          import json
          from datetime import datetime

          # Read CSV and convert to JSON
          data = []
          try:
              with open('guild_stats.csv', 'r', encoding='utf-8') as f:
                  reader = csv.DictReader(f)
                  for row in reader:
                      # Convert numeric fields
                      row['StudyLevel'] = int(row['StudyLevel']) if row['StudyLevel'] and row['StudyLevel'].isdigit() else 0
                      row['NexusLevel'] = int(row['NexusLevel']) if row['NexusLevel'] and row['NexusLevel'].lstrip('-').isdigit() else 0
                      data.append(row)
          except FileNotFoundError:
              print('No CSV file found')
              
          # Add metadata
          result = {
              'lastUpdated': datetime.utcnow().isoformat() + 'Z',
              'guilds': data
          }

          # Write JSON file for the webpage
          with open('docs/guild-data.json', 'w', encoding='utf-8') as f:
              json.dump(result, f, indent=2)

          print(f'Converted {len(data)} guild records to JSON')
          "

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add files that exist
          git add docs/guild-data.json

          # Only add baseline file if it exists
          if [ -f "docs/daily-baseline.json" ]; then
            git add docs/daily-baseline.json
          fi

          # Only commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "Update guild stats data - $(date)"
            git push
          else
            echo "No changes to commit"
          fi

  deploy-production:
    needs: update-data
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Pull latest changes
        run: git pull origin master

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./docs"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-staging:
    needs: update-data
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'

    steps:
      - name: Checkout dev branch
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Pull latest changes
        run: git pull origin dev

      - name: Create staging-specific index.html
        run: |
          # Create staging version of the HTML with visual indicators
          cp docs/index.html docs/index.html.bak

          # Add staging indicators and styling
          sed -i 's/<title>Guild Stats Dashboard<\/title>/<title>[STAGING] Guild Stats Dashboard<\/title>/' docs/index.html

          # Add staging banner styling to CSS
          sed -i '/--gradient-3: linear-gradient/a \
            --staging-bg: linear-gradient(45deg, #ff6b35, #f7931e); \
            --staging-text: #ffffff;' docs/index.html

          # Modify the header to show staging
          sed -i 's/<h1>Guild Stats Dashboard<\/h1>/<div style="background: var(--staging-bg); padding: 8px 0; margin: -40px -25px 20px -25px; border-radius: 15px 15px 0 0;"><small style="color: var(--staging-text); font-size: 0.9rem; font-weight: 600;">🚧 STAGING ENVIRONMENT 🚧<\/small><\/div><h1>Guild Stats Dashboard<\/h1>/' docs/index.html

      - name: Deploy to gh-pages-staging branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create a temporary directory for staging deployment
          mkdir -p /tmp/staging-deploy
          cp -r docs/* /tmp/staging-deploy/

          # Switch to gh-pages-staging branch (create if doesn't exist)
          git fetch origin
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages-staging; then
            git checkout gh-pages-staging
          else
            git checkout --orphan gh-pages-staging
            git rm -rf . 2>/dev/null || true
          fi

          # Clear current content and copy staging files
          rm -rf * 2>/dev/null || true
          cp -r /tmp/staging-deploy/* .

          # Add CNAME file for custom subdomain (optional)
          echo "dev-guildstats.yourdomain.com" > CNAME 2>/dev/null || true

          # Create .nojekyll to ensure GitHub serves our files directly
          touch .nojekyll

          # Commit and push
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "Deploy staging - $(date)"
            git push origin gh-pages-staging
            echo "✅ Staging deployed to gh-pages-staging branch"
            echo "📍 Staging URL: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/staging/"
          else
            echo "No changes to deploy"
          fi

  # Optional: Create a job to set up staging Pages deployment
  setup-staging-pages:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'

    steps:
      - name: Setup staging environment info
        run: |
          echo "🚀 Staging deployment completed!"
          echo "📍 Your staging site should be available at:"
          echo "   https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/staging/"
          echo ""
          echo "💡 To set up a custom subdomain for staging:"
          echo "   1. Go to your repository Settings > Pages"
          echo "   2. Create a second Pages site from the 'gh-pages-staging' branch"
          echo "   3. Configure your DNS to point dev-guildstats.yourdomain.com to GitHub Pages"
