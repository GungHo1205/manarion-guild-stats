name: Update Guild Stats

on:
  schedule:
    # Runs every hour at minute 0 (only on main branch)
    - cron: "0 * * * *"
    # Special run at midnight UTC for baseline (only on main branch)
    - cron: "0 0 * * *"
  workflow_dispatch: # Allows manual triggering
  push:
    branches: [main, dev] # Trigger on both main and dev

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run guild stats script
        run: python guild-stats.py

      - name: Convert CSV to JSON for web display
        run: |
          python -c "
          import csv
          import json
          from datetime import datetime

          # Read CSV and convert to JSON
          data = []
          try:
              with open('guild_stats.csv', 'r', encoding='utf-8') as f:
                  reader = csv.DictReader(f)
                  for row in reader:
                      # Convert numeric fields
                      row['StudyLevel'] = int(row['StudyLevel']) if row['StudyLevel'] and row['StudyLevel'].isdigit() else 0
                      row['NexusLevel'] = int(row['NexusLevel']) if row['NexusLevel'] and row['NexusLevel'].lstrip('-').isdigit() else 0
                      data.append(row)
          except FileNotFoundError:
              print('No CSV file found')
              
          # Add metadata
          result = {
              'lastUpdated': datetime.utcnow().isoformat() + 'Z',
              'guilds': data
          }

          # Write JSON file for the webpage
          with open('docs/guild-data.json', 'w', encoding='utf-8') as f:
              json.dump(result, f, indent=2)

          print(f'Converted {len(data)} guild records to JSON')
          "

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/guild-data.json docs/daily-baseline.json
          git diff --staged --quiet || git commit -m "Update guild stats data - $(date)"
          git push

  deploy-production:
    needs: update-data
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    environment:
      name: production
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./docs"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-staging:
    needs: update-data
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'

    environment:
      name: staging
      url: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}-dev/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Create staging docs
        run: |
          # Add staging indicator to the HTML
          sed -i 's/<title>Guild Stats Dashboard<\/title>/<title>[DEV] Guild Stats Dashboard<\/title>/' docs/index.html
          sed -i 's/<h1>Guild Stats Dashboard<\/h1>/<h1>ðŸš§ Guild Stats Dashboard (DEV)<\/h1>/' docs/index.html

      - name: Deploy to staging branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create or switch to gh-pages-dev branch
          git fetch origin
          git checkout -b gh-pages-dev || git checkout gh-pages-dev

          # Clear existing content except .git
          find . -maxdepth 1 ! -name '.git' ! -name '.' -exec rm -rf {} +

          # Copy docs content to root
          git checkout dev -- docs/
          mv docs/* .
          rmdir docs

          # Commit and push to gh-pages-dev
          git add .
          git commit -m "Deploy dev branch - $(date)" || exit 0
          git push origin gh-pages-dev
