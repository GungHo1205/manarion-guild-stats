name: Update Guild Stats

on:
  schedule:
    # Runs every hour
    - cron: "0 * * * *"
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  update-data:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run migration if needed
        run: |
          # Check if database exists, if not, run migration
          if [ ! -f "docs/guild-stats.db" ]; then
            echo "Database not found, running migration..."
            python migration-script.py
          else
            echo "Database exists, skipping migration"
          fi

      - name: Run guild stats script (SQLite version)
        run: python guild-stats.py

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull origin ${{ github.ref_name }}

          # Add SQLite database
          git add docs/guild-stats.db

          # Add frontend files
          git add docs/index.html
          git add docs/api.py

          # Check if there are any changes to commit
          if ! git diff --staged --quiet; then
            git commit -m "Update guild stats database - $(date)"
            
            # Push with retry logic
            for i in {1..3}; do
              if git push origin ${{ github.ref_name }}; then
                echo "Successfully pushed changes"
                break
              else
                echo "Push failed, attempt $i/3"
                if [ $i -lt 3 ]; then
                  echo "Pulling latest changes and retrying..."
                  git pull --rebase origin ${{ github.ref_name }}
                  sleep 2
                else
                  echo "All push attempts failed"
                  exit 1
                fi
              fi
            done
          else
            echo "No changes to commit"
          fi

      - name: Database size check
        run: |
          if [ -f "docs/guild-stats.db" ]; then
            db_size=$(du -h docs/guild-stats.db | cut -f1)
            echo "Database size: $db_size"
            
            # Check if database is getting too large (>100MB warning)
            db_size_bytes=$(du -b docs/guild-stats.db | cut -f1)
            if [ "$db_size_bytes" -gt 104857600 ]; then
              echo "Warning: Database size exceeds 100MB. Consider implementing data retention policies."
            fi
          fi

  deploy:
    needs: update-data
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./docs"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Optional cleanup job to run weekly
  cleanup-database:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 0 * * *' # Only on midnight runs
    needs: update-data

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pull latest changes
        run: git pull origin ${{ github.ref_name }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

      - name: Database maintenance
        run: |
          python3 -c "
          import sqlite3
          import os
          from datetime import datetime, timedelta

          db_path = 'docs/guild-stats.db'
          if os.path.exists(db_path):
              conn = sqlite3.connect(db_path)
              
              # Remove old data (older than 60 days)
              cutoff = (datetime.now() - timedelta(days=60)).isoformat()
              
              # Clean old snapshots
              cursor = conn.execute('DELETE FROM guild_snapshots WHERE timestamp < ?', [cutoff])
              snapshots_deleted = cursor.rowcount
              
              # Clean old market prices  
              cursor = conn.execute('DELETE FROM market_prices WHERE timestamp < ?', [cutoff])
              prices_deleted = cursor.rowcount
              
              # Clean old baselines (keep last 30 days)
              baseline_cutoff = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
              cursor = conn.execute('DELETE FROM daily_baselines WHERE date < ?', [baseline_cutoff])
              baselines_deleted = cursor.rowcount
              
              # Clean old processing logs (keep last 30 days)
              cursor = conn.execute('DELETE FROM processing_logs WHERE timestamp < ?', [cutoff])
              logs_deleted = cursor.rowcount
              
              # Vacuum to reclaim space
              conn.execute('VACUUM')
              conn.commit()
              conn.close()
              
              print(f'Database maintenance completed:')
              print(f'  - Removed {snapshots_deleted} old guild snapshots')
              print(f'  - Removed {prices_deleted} old market prices')
              print(f'  - Removed {baselines_deleted} old baselines')  
              print(f'  - Removed {logs_deleted} old processing logs')
              print(f'  - Database vacuumed')
          "

      - name: Commit database maintenance
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action - DB Maintenance"

          # Add updated database
          git add docs/guild-stats.db

          if ! git diff --staged --quiet; then
            git commit -m "Database maintenance - cleanup old data - $(date)"
            git push origin ${{ github.ref_name }}
            echo "Database maintenance committed"
          else
            echo "No database changes after maintenance"
          fi
